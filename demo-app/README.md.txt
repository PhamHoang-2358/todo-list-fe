# üìã Task Manager Dashboard

·ª®ng d·ª•ng qu·∫£n l√Ω c√¥ng vi·ªác d·∫°ng **Dashboard hi·ªán ƒë·∫°i**, ph√°t tri·ªÉn b·∫±ng **HTML, CSS, JavaScript thu·∫ßn**.  
D·ª± √°n thu·ªôc *S·∫£n ph·∫©m th·ª±c t·∫≠p 1*, g·ªìm: ƒëƒÉng nh·∫≠p/ƒëƒÉng k√Ω, dashboard, qu·∫£n l√Ω task/project, bi·ªÉu ƒë·ªì, l·ªãch, v√† c√°c widget ti·ªán √≠ch.

---

## üöÄ T√≠nh nƒÉng ƒë√£ ho√†n th√†nh

### üîê X√°c th·ª±c (Auth)
- ƒêƒÉng k√Ω t√†i kho·∫£n (ID, Email, M·∫≠t kh·∫©u, T√™n, SƒêT).  
  - Ki·ªÉm tra h·ª£p l·ªá: m·∫≠t kh·∫©u t·ªëi thi·ªÉu 6 k√Ω t·ª±, nh·∫≠p l·∫°i kh·ªõp, email h·ª£p l·ªá, s·ªë ƒëi·ªán tho·∫°i h·ª£p l·ªá.  
  - Ch·∫∑n tr√πng ID ho·∫∑c Email.  
- ƒêƒÉng nh·∫≠p b·∫±ng ID/Email + M·∫≠t kh·∫©u.  
- **Remember me** (ghi nh·ªõ ƒëƒÉng nh·∫≠p).  
- Chuy·ªÉn ƒë·ªïi **ƒêƒÉng nh·∫≠p ‚áÑ ƒêƒÉng k√Ω** trong overlay (link `data-switch`).  
- D·ªØ li·ªáu t√†i kho·∫£n l∆∞u trong **localStorage** (`users`).  

### üè† Dashboard (index.html + dashboard-home.js)
- **Quickbar** (toggle ho·∫∑c nh·∫•n `Q`).  
- **Top Nav + Breadcrumb** (chuy·ªÉn nhanh t·ªõi section).  
- **Widget Th·ªùi ti·∫øt** (API wttr.in, hi·ªÉn th·ªã nhi·ªát ƒë·ªô, ·∫©m, gi√≥, UV, m∆∞a, t·∫ßm nh√¨n, b√¨nh minh/ho√†ng h√¥n).  
- **Widget Quote** (tr√≠ch d·∫´n).  
- **Music Player** (upload nh·∫°c, hi·ªÉn th·ªã th√¥ng tin, ti·∫øn tr√¨nh, l·ªãch s·ª≠ 5 b√†i).  
- **Bi·ªÉu ƒë·ªì t√†i ch√≠nh (Chart.js)** (bi·ªÉu ƒë·ªì ƒë∆∞·ªùng VNIndex).  

### üìÇ Qu·∫£n l√Ω D·ª± √°n & C√¥ng vi·ªác (features/src/task)
- **D·ª± √°n**: th√™m m·ªõi (T√™n, Ng√¢n s√°ch, Ch·ªß s·ªü h·ªØu), l∆∞u trong `tp_projects`.  
- **Task**: th√™m m·ªõi, s·ª≠a, xo√°, ƒë√°nh d·∫•u ho√†n th√†nh.  
  - Tr∆∞·ªùng th√¥ng tin: Ti√™u ƒë·ªÅ, D·ª± √°n, H·∫°n ch√≥t, M·ª©c ∆∞u ti√™n, M√¥ t·∫£.  
  - L∆∞u d·ªØ li·ªáu v√†o `tp_tasks`.  
- **Mini Task List**: hi·ªÉn th·ªã nhanh, c√≥ n√∫t **S·ª≠a** / **Xo√°**.  

### üìä Th·ªëng k√™ & Ho·∫°t ƒë·ªông
- **Recent**: c√¥ng vi·ªác/d·ª± √°n v·ª´a t·∫°o.  
- **Due**: c√¥ng vi·ªác g·∫ßn ƒë·∫øn h·∫°n.  
- **Activity**: log h√†nh ƒë·ªông g·∫ßn ƒë√¢y.  

### üì± Responsive & Giao di·ªán
- B·ªë c·ª•c **dashboard** (sidebar + main).  
- **Card bo tr√≤n, b√≥ng nh·∫π, m√†u s√°ng**.  
- Responsive tr√™n **desktop v√† mobile (Android)**.  
- Icon t·ª´ **Font Awesome**.  

---

## üõ† C√¥ng ngh·ªá s·ª≠ d·ª•ng

- HTML5 / CSS3 (Flexbox, Grid, Responsive).  
- JavaScript (ES6).  
- Chart.js (bi·ªÉu ƒë·ªì).  
- Font Awesome (icon).  
- LocalStorage / SessionStorage.  
- API wttr.in (d·ªØ li·ªáu th·ªùi ti·∫øt).  

---

# üìÇ C·∫•u tr√∫c d·ª± √°n ‚Äî Task Manager App

```
demo-app/
‚îÇ
‚îú‚îÄ‚îÄ index.html                  # Trang ch·ªß (Dashboard Home)
‚îú‚îÄ‚îÄ README.md.txt               # H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
‚îÇ
‚îú‚îÄ‚îÄ assets/                     # T√†i nguy√™n tƒ©nh (·∫£nh, nh·∫°c, icon)
‚îÇ   ‚îî‚îÄ‚îÄ images/...
‚îÇ
‚îú‚îÄ‚îÄ components/                 # Th√†nh ph·∫ßn JS t√°i s·ª≠ d·ª•ng
‚îÇ   ‚îî‚îÄ‚îÄ modal.js
‚îÇ
‚îú‚îÄ‚îÄ features/
‚îÇ   ‚îî‚îÄ‚îÄ src/
‚îÇ       ‚îú‚îÄ‚îÄ task/               # Module qu·∫£n l√Ω c√¥ng vi·ªác
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ task.html       # Giao di·ªán qu·∫£n l√Ω Task
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ task.css        # CSS cho Task Manager
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ task.js         # Logic CRUD Task, Project, Calendar, Filter
‚îÇ       ‚îÇ
‚îÇ       ‚îú‚îÄ‚îÄ user/               # Module ng∆∞·ªùi d√πng (login/register - overlay)
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ ... (t√≠ch h·ª£p s·∫µn trong index.html)
‚îÇ       ‚îÇ
‚îÇ       ‚îî‚îÄ‚îÄ welcome/            # Giao di·ªán welcome (n·∫øu c·∫ßn t√°ch ri√™ng)
‚îÇ           ‚îî‚îÄ‚îÄ welcome.css
‚îÇ
‚îú‚îÄ‚îÄ scripts/
‚îÇ   ‚îî‚îÄ‚îÄ dashboard-home.js       # Logic trang ch·ªß: theme, quickbar, weather, quote,
‚îÇ                               # music, finance chart, mini tasks, auth overlay
‚îÇ
‚îî‚îÄ‚îÄ styles/
    ‚îú‚îÄ‚îÄ dashboard-home.css      # CSS cho Dashboard Home
    ‚îú‚îÄ‚îÄ task.css                # CSS cho Task Manager (d√πng ri√™ng trong task/)
    ‚îú‚îÄ‚îÄ main.css                # CSS chung (reset, button, layout)
    ‚îî‚îÄ‚îÄ variables.css           # Bi·∫øn m√†u s·∫Øc, theme (global)
```

---

# üöÄ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng

## 1. Kh·ªüi ch·∫°y ·ª©ng d·ª•ng

* M·ªü file `index.html` trong tr√¨nh duy·ªát (Chrome/Edge/Firefox).
* ƒê√¢y l√† **trang ch·ªß (Dashboard)** v·ªõi c√°c widget: th·ªùi ti·∫øt, quote, nh·∫°c, bi·ªÉu ƒë·ªì t√†i ch√≠nh, mini tasks.

## 2. ƒêƒÉng nh·∫≠p / ƒêƒÉng k√Ω

* Nh·∫•n n√∫t **ƒêƒÉng nh·∫≠p / ƒêƒÉng k√Ω** ·ªü header.
* ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi (ID, Email, M·∫≠t kh·∫©u, T√™n, SƒêT).
* H·ªá th·ªëng l∆∞u th√¥ng tin v√†o **LocalStorage** (`taskapp_users`).
* Sau khi ƒëƒÉng nh·∫≠p, d·ªØ li·ªáu c√° nh√¢n (projects, tasks) ƒë∆∞·ª£c l∆∞u v√†o `user_data_{USERID}`.

## 3. Dashboard Home (`index.html`)

* **Quickbar**: nh·∫£y nhanh t·ªõi widget.
* **Breadcrumb**: hi·ªÉn th·ªã v·ªã tr√≠ hi·ªán t·∫°i khi cu·ªôn.
* **Weather**: nh·∫≠p t√™n th√†nh ph·ªë ‚Üí xem th·ªùi ti·∫øt (API wttr.in).
* **Quote**: hi·ªÉn th·ªã tr√≠ch d·∫´n ng·∫´u nhi√™n.
* **Music**: ch·ªçn file nh·∫°c t·ª´ m√°y ho·∫∑c ch·ªçn c√≥ s·∫µn.
* **Finance Chart**: hi·ªÉn th·ªã VNIndex demo b·∫±ng Chart.js.
* **Mini Tasks**: danh s√°ch c√¥ng vi·ªác g·∫ßn ƒë√¢y (demo ho·∫∑c user).

## 4. Task Manager (`features/src/task/task.html`)

* Sidebar:

  * **Projects**: th√™m, ch·ªçn, xo√° d·ª± √°n.
  * **Form th√™m Task**: nh·∫≠p t√™n, chi ti·∫øt, tr·∫°ng th√°i, ∆∞u ti√™n, deadline, assignee, ·∫£nh.
  * N√∫t **ƒêƒÉng xu·∫•t** ƒë·ªÉ quay l·∫°i trang ch·ªß.

* Main content:

  * **Calendar**: hi·ªÉn th·ªã c√¥ng vi·ªác theo ng√†y, ch·ªçn ng√†y ƒë·ªÉ xem task.
  * **Status Insight**: th·ªëng k√™ ti·∫øn ƒë·ªô (ch∆∞a b·∫Øt ƒë·∫ßu, ƒëang l√†m, ho√†n th√†nh) b·∫±ng v√≤ng tr√≤n & thanh bar.
  * **Filter & Search**: l·ªçc theo tr·∫°ng th√°i, ∆∞u ti√™n, deadline, t·ª´ kh√≥a.
  * **Task List**: hi·ªÉn th·ªã, ch·ªânh s·ª≠a, xo√° task, xem ·∫£nh ƒë√≠nh k√®m.

## 5. L∆∞u tr·ªØ d·ªØ li·ªáu

* T·∫•t c·∫£ d·ªØ li·ªáu ƒë∆∞·ª£c l∆∞u c·ª•c b·ªô b·∫±ng **LocalStorage** theo t·ª´ng user.
* Key ch√≠nh:

  * `taskapp_users`: danh s√°ch user.
  * `currentUserId`: user ƒëang ƒëƒÉng nh·∫≠p.
  * `user_data_{id}`: ch·ª©a `{ projects: [], tasks: [] }` cho m·ªói user.

## 6. Reset d·ªØ li·ªáu

* M·ªü DevTools ‚Üí Application ‚Üí Local Storage.
* Xo√° c√°c key: `taskapp_users`, `user_data_{id}`, `currentUserId`.


---

## üí° Ghi ch√∫

- D·ªØ li·ªáu ch·ªâ l∆∞u trong **tr√¨nh duy·ªát**. ƒê·ªÉ reset: DevTools ‚Üí Application ‚Üí Local Storage ‚Üí xo√° `users`, `tp_projects`, `tp_tasks`.  
- ƒê√¢y l√† s·∫£n ph·∫©m th·ª±c t·∫≠p, **ch∆∞a c√≥ backend/server**.  

---

## üë®‚Äçüíª T√°c gi·∫£

- **Ph·∫°m Ho√†ng Anh**  
- D·ª± √°n: *S·∫£n ph·∫©m th·ª±c t·∫≠p 1 ‚Äî Task Manager Dashboard*
// ===================== DATA STRUCTURE ======================
const USER_ID = localStorage.getItem("currentUserId") || "";
if (!USER_ID) location.href = "../user/login.html";

function getUserData() {
  return (
    JSON.parse(localStorage.getItem("user_data_" + USER_ID)) || {
      projects: [],
      tasks: [],
    }
  );
}

function setUserData(data) {
  localStorage.setItem("user_data_" + USER_ID, JSON.stringify(data));
}

// ===================== PROJECTS ============================
function renderProjects() {
  const data = getUserData();
  const ul = document.getElementById("projectList");
  ul.innerHTML = "";
  data.projects.forEach((prj, idx) => {
    const li = document.createElement("li");
    li.innerHTML = `
      <span onclick="selectProject('${prj.id}')" class="pj-name">${prj.name}</span>
      <button onclick="deleteProject('${prj.id}')"><i class="fas fa-trash"></i></button>
    `;
    ul.appendChild(li);
  });
}
window.selectProject = function (id) {
  localStorage.setItem("currentProjectId", id);
  renderAll();
};
window.deleteProject = function (id) {
  if (!confirm("X√≥a d·ª± √°n n√†y v√† t·∫•t c·∫£ task?")) return;
  let data = getUserData();
  data.projects = data.projects.filter((p) => p.id !== id);
  data.tasks = data.tasks.filter((t) => t.projectId !== id);
  setUserData(data);
  if (data.projects.length)
    localStorage.setItem("currentProjectId", data.projects[0].id);
  else localStorage.removeItem("currentProjectId");
  renderAll();
};
document
  .getElementById("formAddProject")
  .addEventListener("submit", function (e) {
    e.preventDefault();
    const name = document.getElementById("inputProjectName").value.trim();
    if (!name) return;
    let data = getUserData();
    const id = "pj" + Date.now();
    data.projects.push({ id, name });
    setUserData(data);
    localStorage.setItem("currentProjectId", id);
    this.reset();
    renderAll();
  });

// ===================== TASK CRUD ===========================
function renderAll() {
  renderProjects();
  renderCurrentProject();
  renderTasks();
  renderStats();
  renderChart();
  renderCalendar();
}
function renderCurrentProject() {
  let data = getUserData();
  let id =
    localStorage.getItem("currentProjectId") ||
    (data.projects[0] && data.projects[0].id);
  if (!id && data.projects.length) {
    id = data.projects[0].id;
    localStorage.setItem("currentProjectId", id);
  }
  const pj = data.projects.find((p) => p.id === id);
  document.getElementById("currentProjectName").textContent = pj
    ? pj.name
    : "Ch∆∞a c√≥ d·ª± √°n n√†o";
}

document.getElementById("formTask").addEventListener("submit", function (e) {
  e.preventDefault();
  let data = getUserData();
  const projectId = localStorage.getItem("currentProjectId");
  if (!projectId) return alert("Ch∆∞a ch·ªçn d·ª± √°n!");
  const title = document.getElementById("inputTaskTitle").value.trim();
  const content = document.getElementById("inputTaskContent").value.trim();
  const status = document.getElementById("inputTaskStatus").value;
  const priority = document.getElementById("inputTaskPriority").value;
  const deadline = document.getElementById("inputTaskDeadline").value;
  const assignee = document.getElementById("inputTaskAssignee").value.trim();
  const imgInput = document.getElementById("inputTaskImage");
  const imgFile = imgInput.files[0];

  function saveTask(imgData) {
    data.tasks.push({
      id: "tsk" + Date.now(),
      projectId,
      title,
      content,
      status,
      priority,
      deadline,
      assignee,
      done: status === "done",
      image: imgData || null,
    });
    setUserData(data);
    document.getElementById("formTask").reset();
    renderAll();
  }
  if (imgFile) {
    const reader = new FileReader();
    reader.onload = function (ev) {
      saveTask(ev.target.result);
    };
    reader.readAsDataURL(imgFile);
  } else {
    saveTask(null);
  }
});

window.editTask = function (taskId) {
  let data = getUserData();
  const task = data.tasks.find((t) => t.id === taskId);
  if (!task) return;
  document.getElementById("inputTaskTitle").value = task.title;
  document.getElementById("inputTaskContent").value = task.content;
  document.getElementById("inputTaskStatus").value = task.status;
  document.getElementById("inputTaskPriority").value = task.priority;
  document.getElementById("inputTaskDeadline").value = task.deadline;
  document.getElementById("inputTaskAssignee").value = task.assignee;
  window.deleteTask(taskId); // X√≥a c≈©, khi submit s·∫Ω t·∫°o m·ªõi
};
window.deleteTask = function (taskId) {
  if (!confirm("X√≥a c√¥ng vi·ªác n√†y?")) return;
  let data = getUserData();
  data.tasks = data.tasks.filter((t) => t.id !== taskId);
  setUserData(data);
  renderAll();
};
window.toggleTaskStatus = function (taskId) {
  let data = getUserData();
  let task = data.tasks.find((t) => t.id === taskId);
  if (task) {
    if (task.status === "notstarted") task.status = "inprogress";
    else if (task.status === "inprogress") task.status = "done";
    else task.status = "notstarted";
    task.done = task.status === "done";
    setUserData(data);
    renderAll();
  }
};

// ===================== FILTER & LIST =======================
function renderTasks() {
  let data = getUserData();
  const projectId = localStorage.getItem("currentProjectId");
  let tasks = data.tasks.filter((t) => t.projectId === projectId);

  // Filter n√¢ng cao
  const status = document.getElementById("filterStatus").value;
  const priority = document.getElementById("filterPriority").value;
  const deadline = document.getElementById("filterDeadline").value;
  const search = document.getElementById("inputSearchTask").value.toLowerCase();

  if (status !== "all") tasks = tasks.filter((t) => t.status === status);
  if (priority !== "all") tasks = tasks.filter((t) => t.priority === priority);
  if (deadline) tasks = tasks.filter((t) => t.deadline === deadline);
  if (search)
    tasks = tasks.filter(
      (t) =>
        t.title.toLowerCase().includes(search) ||
        t.content.toLowerCase().includes(search) ||
        t.assignee.toLowerCase().includes(search)
    );

  const ul = document.getElementById("taskList");
  ul.innerHTML = "";
  if (!tasks.length) {
    ul.innerHTML = "<li>Kh√¥ng c√≥ c√¥ng vi·ªác n√†o.</li>";
    return;
  }
  tasks.forEach((task) => {
    ul.innerHTML += `
      <li>
        <div class="task-main">
          <input type="checkbox" onclick="toggleTaskStatus('${task.id}')" ${
      task.status === "done" ? "checked" : ""
    } title="Chuy·ªÉn tr·∫°ng th√°i">
          <span class="title">${task.title}</span>
          <span class="status status-${task.status}">${statusName(
      task.status
    )}</span>
        </div>
        <div class="task-info">
          <span>∆Øu ti√™n: <b>${priorityName(task.priority)}</b></span>
          <span>Deadline: <b>${task.deadline || "--"}</b></span>
          <span>Ph·ª• tr√°ch: <b>${task.assignee || "--"}</b></span>
        </div>
        <div class="task-actions">
          <button onclick="editTask('${
            task.id
          }')"><i class="fas fa-edit"></i></button>
          <button onclick="deleteTask('${
            task.id
          }')"><i class="fas fa-trash"></i></button>
          ${
            task.image
              ? `<button onclick="toggleImage('${task.id}')"><i class="fas fa-image"></i> ·∫¢nh</button>`
              : ""
          }
        </div>
        ${
          task.image
            ? `<div class="task-img-view" id="img-${task.id}" style="display:none"><img src="${task.image}"></div>`
            : ""
        }
        <div class="desc">${task.content}</div>
      </li>
    `;
  });
}
window.toggleImage = function (id) {
  const imgDiv = document.getElementById("img-" + id);
  if (imgDiv)
    imgDiv.style.display = imgDiv.style.display === "none" ? "block" : "none";
};
function statusName(val) {
  return val === "notstarted"
    ? "Ch∆∞a b·∫Øt ƒë·∫ßu"
    : val === "inprogress"
    ? "ƒêang th·ª±c hi·ªán"
    : "Ho√†n th√†nh";
}
function priorityName(val) {
  return val === "high" ? "Cao" : val === "medium" ? "Trung b√¨nh" : "Th·∫•p";
}
["filterStatus", "filterPriority", "filterDeadline", "inputSearchTask"].forEach(
  (id) => document.getElementById(id).addEventListener("input", renderTasks)
);
document.getElementById("clearFilterBtn").onclick = function () {
  [
    "filterStatus",
    "filterPriority",
    "filterDeadline",
    "inputSearchTask",
  ].forEach((id) => {
    document.getElementById(id).value = "";
    if (id.startsWith("filter")) document.getElementById(id).value = "all";
  });
  renderTasks();
};

// ===================== STATS & CHART =======================
function renderStats() {
  let data = getUserData();
  const projectId = localStorage.getItem("currentProjectId");
  const tasks = data.tasks.filter((t) => t.projectId === projectId);
  const counts = {
    notstarted: tasks.filter((t) => t.status === "notstarted").length,
    inprogress: tasks.filter((t) => t.status === "inprogress").length,
    done: tasks.filter((t) => t.status === "done").length,
  };
  document.getElementById("taskStats").innerHTML = `
    <span>Ch∆∞a b·∫Øt ƒë·∫ßu: <b>${counts.notstarted}</b></span>
    <span>ƒêang th·ª±c hi·ªán: <b>${counts.inprogress}</b></span>
    <span>Ho√†n th√†nh: <b>${counts.done}</b></span>
    <span>T·ªïng: <b>${tasks.length}</b></span>
  `;
}
let chart;
function renderChart() {
  let data = getUserData();
  const projectId = localStorage.getItem("currentProjectId");
  const tasks = data.tasks.filter((t) => t.projectId === projectId);
  const counts = [
    tasks.filter((t) => t.status === "notstarted").length,
    tasks.filter((t) => t.status === "inprogress").length,
    tasks.filter((t) => t.status === "done").length,
  ];
  const ctx = document.getElementById("taskChart").getContext("2d");
  if (chart) chart.destroy();
  chart = new Chart(ctx, {
    type: "pie",
    data: {
      labels: ["Ch∆∞a b·∫Øt ƒë·∫ßu", "ƒêang th·ª±c hi·ªán", "Ho√†n th√†nh"],
      datasets: [
        { data: counts, backgroundColor: ["#fdba74", "#60a5fa", "#22d3ee"] },
      ],
    },
    options: { responsive: false, plugins: { legend: { display: true } } },
  });
}

// ===================== CALENDAR VIEW =======================
// ===================== CALENDAR VIEW =======================
function renderCalendar() {
  const data = getUserData();
  const projectId = localStorage.getItem("currentProjectId");
  const tasks = data.tasks.filter((t) => t.projectId === projectId);

  const now = new Date();
  const year = now.getFullYear();
  const month = now.getMonth();
  const today = now.getDate();

  document.getElementById("calendarMonth").textContent = `${month + 1}/${year}`;

  const daysInMonth = new Date(year, month + 1, 0).getDate();
  const grid = document.getElementById("calendarGrid");
  grid.innerHTML = "";

  for (let i = 1; i <= daysInMonth; i++) {
    const dayStr = `${year}-${String(month + 1).padStart(2, "0")}-${String(
      i
    ).padStart(2, "0")}`;
    const hasTask = tasks.some((t) => t.deadline === dayStr);

    const div = document.createElement("div");
    div.className = "calendar-day" + (i === today ? " today" : "");
    div.textContent = i;

    if (hasTask) {
      const dot = document.createElement("div");
      dot.className = "task-dot";
      div.appendChild(dot);
    }

    grid.appendChild(div);
  }

  renderModernTasks(tasks); // ‚ûï ph·∫ßn danh s√°ch c√¥ng vi·ªác d·∫°ng th·∫ª b√™n ph·∫£i
}
function renderModernTasks(tasks) {
  const container = document.getElementById("taskListModern");
  container.innerHTML = "";
  if (!tasks.length) {
    container.innerHTML = "<p>Kh√¥ng c√≥ c√¥ng vi·ªác n√†o.</p>";
    return;
  }
  tasks.forEach((task) => {
    const div = document.createElement("div");
    div.className = "task-card";
    div.innerHTML = `
      <div class="task-title">${task.title}</div>
      <div class="task-meta">
        <span>Deadline: <b>${task.deadline || "--"}</b></span>
        <span>Ng∆∞·ªùi ph·ª• tr√°ch: <b>${task.assignee || "--"}</b></span>
        <span class="task-label ${task.priority}">${priorityName(
      task.priority
    )}</span>
        <span>${statusName(task.status)}</span>
      </div>
    `;
    container.appendChild(div);
  });
}

// ===================== ƒêƒÇNG XU·∫§T ===========================
document.getElementById("logoutBtn").onclick = function () {
  localStorage.removeItem("currentUserId");
  location.href = "../../../index.html";
};

// ========== INIT ==========
renderAll();
